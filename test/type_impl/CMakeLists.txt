set(test_case_seq 1)
do_test(type_impl "Hello inner function\nHello outter function\n" ca inner_function.ca)
do_test(type_impl "Hello inner function 1\nHello inner function 2\nHello outter function\n" ca inner_function2.ca)
do_test(type_impl "Hello inner function 1\nHello inner function 2\n" ca inner_function3.ca)
do_testf(type_impl "inner_function3_0.ca.ll" "inner_function3_0.ca.ll.tmp" ca -g -ll inner_function3_0.ca inner_function3_0.ca.ll.tmp)
do_test(type_impl "Hello C A" ca inner_function4.ca)
do_test(type_impl "Hello C A\nin while in while in while in while in while" ca inner_function_more_level.ca)
do_test(todo-type_impl "good" ca -g simple_0.ca)
do_test(type_impl "AA { a: 100, b: C }\n100\nC\n167\n100\nC\nAA { a: 303, b: A }\n303\nA\n" ca simple.ca)
do_test(type_impl "AA { a: 100, b: A }\n100\nA\nAA { a: 100, b: A }\n100\nA\n" ca simple1.ca)
do_test(type_impl "AA { a: 100, b: A }\n100\nA\nAA { a: 100, b: A }\n100\nA\n" ca simple2.ca)
do_test(type_impl "AA { a: 100, b: A }\n100\nA\nAA { a: 100, b: A }\n100\nA\n" ca simple3.ca)
do_test(type_impl "AA { a: 100, b: A }\n100\nA\nAA { a: 100, b: A }\n100\nA\nAA { a: 200, b: C }\n200\nC\nAA { a: 200, b: C }\n200\nC\n" ca simple4.ca)
do_test(type_impl "AA { a: 100, b: A }\n100\nA\nAA { a: 100, b: A }\n100\nA\n" ca simple_inner1.ca)
do_test(type_impl "AA { a: 100, b: A }\n100\nA\nAA { a: 100, b: A }\n100\nA\n" ca simple_inner2.ca)
do_test(type_impl "AA { a: 100, b: A }\n100\nA\nAA { a: 100, b: A }\n100\nA\nAA { a: 100, b: A }\n100\nA\n" ca simple_inner3.ca)
do_test(type_impl "AA { a: 100, b: A }\n100\nA\nAA { a: 100, b: A }\n100\nA\nAA { a: 200, b: C }\n200\nC\nAA { a: 200, b: C }\n200\nC\n" ca simple_inner4.ca)
do_test(type_impl "AA { a: 201, b: B }\nAA { a: 201, b: B }" ca domain.ca)
do_test(type_impl "AA { a: 201, b: B }" ca return_self.ca)
do_test(type_impl "AA { a: 572662306, b: A }\nAA { a: 572662306, b: A }\nAA { a: 572662306, b: A }\nAA { a: 572662306, b: A }\n" ca deep_inner1.ca)
do_test(type_impl "AA { a: 286331153, b: A }\nAA { a: 286331153, b: A }" ca deep_inner2.ca)
do_test(type_impl "hello" ca inner_call.ca)
do_test(type_impl "hello" ca inner_call2.ca)
do_test(type_impl "fn func1\\(a: i32, self: i32\\) {\n                             \\^\n`self` must be the first parameter of an associated function" ca self_pos.ca)
do_test(type_impl "AA { a: 33 }" ca return_self1.ca)
do_test(type_impl "33 AA { a: 33 }" ca return_self2.ca)
do_test(type_impl "AA { a: 33 }\nAA { a: 66 }\nAA { a: 198 }" ca return_self3.ca)
do_test(type_impl "AA { a: 33, b: 34 }\n134" ca self_type.ca)
do_test(type_impl "`i32` type required, but found `i8`" ca aa.ca)

