; ModuleID = 'struct_array2.ca'
source_filename = "struct_array2.ca"

%AA = type { i32, [6 x i1] }
%A1 = type { float, %AA }
%A2 = type { [2 x [2 x %AA]] }

@0 = private unnamed_addr constant [3 x i8] c"AA\00", align 1
@1 = private unnamed_addr constant [6 x i8] c"%s { \00", align 1
@2 = private unnamed_addr constant [6 x i8] c"aa_f1\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@4 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@5 = private unnamed_addr constant [3 x i8] c", \00", align 1
@6 = private unnamed_addr constant [6 x i8] c"aa_f2\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@8 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@9 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@10 = private unnamed_addr constant [3 x i8] c", \00", align 1
@11 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@12 = private unnamed_addr constant [3 x i8] c", \00", align 1
@13 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@14 = private unnamed_addr constant [3 x i8] c", \00", align 1
@15 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@16 = private unnamed_addr constant [3 x i8] c", \00", align 1
@17 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@18 = private unnamed_addr constant [3 x i8] c", \00", align 1
@19 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@20 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@21 = private unnamed_addr constant [3 x i8] c" }\00", align 1
@22 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@23 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@24 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@25 = private unnamed_addr constant [3 x i8] c"AA\00", align 1
@26 = private unnamed_addr constant [6 x i8] c"%s { \00", align 1
@27 = private unnamed_addr constant [6 x i8] c"aa_f1\00", align 1
@28 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@29 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@30 = private unnamed_addr constant [3 x i8] c", \00", align 1
@31 = private unnamed_addr constant [6 x i8] c"aa_f2\00", align 1
@32 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@33 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@34 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@35 = private unnamed_addr constant [3 x i8] c", \00", align 1
@36 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@37 = private unnamed_addr constant [3 x i8] c", \00", align 1
@38 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@39 = private unnamed_addr constant [3 x i8] c", \00", align 1
@40 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@41 = private unnamed_addr constant [3 x i8] c", \00", align 1
@42 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@43 = private unnamed_addr constant [3 x i8] c", \00", align 1
@44 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@45 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@46 = private unnamed_addr constant [3 x i8] c" }\00", align 1
@47 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@48 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@49 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@50 = private unnamed_addr constant [3 x i8] c", \00", align 1
@51 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@52 = private unnamed_addr constant [3 x i8] c", \00", align 1
@53 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@54 = private unnamed_addr constant [3 x i8] c", \00", align 1
@55 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@56 = private unnamed_addr constant [3 x i8] c", \00", align 1
@57 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@58 = private unnamed_addr constant [3 x i8] c", \00", align 1
@59 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@60 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@61 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@62 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@63 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@64 = private unnamed_addr constant [3 x i8] c", \00", align 1
@65 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@66 = private unnamed_addr constant [3 x i8] c", \00", align 1
@67 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@68 = private unnamed_addr constant [3 x i8] c", \00", align 1
@69 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@70 = private unnamed_addr constant [3 x i8] c", \00", align 1
@71 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@72 = private unnamed_addr constant [3 x i8] c", \00", align 1
@73 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@74 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@75 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@76 = private unnamed_addr constant [3 x i8] c"AA\00", align 1
@77 = private unnamed_addr constant [6 x i8] c"%s { \00", align 1
@78 = private unnamed_addr constant [6 x i8] c"aa_f1\00", align 1
@79 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@80 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@81 = private unnamed_addr constant [3 x i8] c", \00", align 1
@82 = private unnamed_addr constant [6 x i8] c"aa_f2\00", align 1
@83 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@84 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@85 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@86 = private unnamed_addr constant [3 x i8] c", \00", align 1
@87 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@88 = private unnamed_addr constant [3 x i8] c", \00", align 1
@89 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@90 = private unnamed_addr constant [3 x i8] c", \00", align 1
@91 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@92 = private unnamed_addr constant [3 x i8] c", \00", align 1
@93 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@94 = private unnamed_addr constant [3 x i8] c", \00", align 1
@95 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@96 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@97 = private unnamed_addr constant [3 x i8] c" }\00", align 1
@98 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@99 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@100 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@101 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@102 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@103 = private unnamed_addr constant [3 x i8] c", \00", align 1
@104 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@105 = private unnamed_addr constant [3 x i8] c", \00", align 1
@106 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@107 = private unnamed_addr constant [3 x i8] c", \00", align 1
@108 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@109 = private unnamed_addr constant [3 x i8] c", \00", align 1
@110 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@111 = private unnamed_addr constant [3 x i8] c", \00", align 1
@112 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@113 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@114 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@115 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@116 = private unnamed_addr constant [2 x i8] c" \00", align 1
@117 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@118 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@119 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@120 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@121 = private unnamed_addr constant [3 x i8] c"A2\00", align 1
@122 = private unnamed_addr constant [6 x i8] c"%s { \00", align 1
@123 = private unnamed_addr constant [4 x i8] c"arr\00", align 1
@124 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@125 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@126 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@127 = private unnamed_addr constant [3 x i8] c"AA\00", align 1
@128 = private unnamed_addr constant [6 x i8] c"%s { \00", align 1
@129 = private unnamed_addr constant [6 x i8] c"aa_f1\00", align 1
@130 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@131 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@132 = private unnamed_addr constant [3 x i8] c", \00", align 1
@133 = private unnamed_addr constant [6 x i8] c"aa_f2\00", align 1
@134 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@135 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@136 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@137 = private unnamed_addr constant [3 x i8] c", \00", align 1
@138 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@139 = private unnamed_addr constant [3 x i8] c", \00", align 1
@140 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@141 = private unnamed_addr constant [3 x i8] c", \00", align 1
@142 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@143 = private unnamed_addr constant [3 x i8] c", \00", align 1
@144 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@145 = private unnamed_addr constant [3 x i8] c", \00", align 1
@146 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@147 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@148 = private unnamed_addr constant [3 x i8] c" }\00", align 1
@149 = private unnamed_addr constant [3 x i8] c", \00", align 1
@150 = private unnamed_addr constant [3 x i8] c"AA\00", align 1
@151 = private unnamed_addr constant [6 x i8] c"%s { \00", align 1
@152 = private unnamed_addr constant [6 x i8] c"aa_f1\00", align 1
@153 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@154 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@155 = private unnamed_addr constant [3 x i8] c", \00", align 1
@156 = private unnamed_addr constant [6 x i8] c"aa_f2\00", align 1
@157 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@158 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@159 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@160 = private unnamed_addr constant [3 x i8] c", \00", align 1
@161 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@162 = private unnamed_addr constant [3 x i8] c", \00", align 1
@163 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@164 = private unnamed_addr constant [3 x i8] c", \00", align 1
@165 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@166 = private unnamed_addr constant [3 x i8] c", \00", align 1
@167 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@168 = private unnamed_addr constant [3 x i8] c", \00", align 1
@169 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@170 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@171 = private unnamed_addr constant [3 x i8] c" }\00", align 1
@172 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@173 = private unnamed_addr constant [3 x i8] c", \00", align 1
@174 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@175 = private unnamed_addr constant [3 x i8] c"AA\00", align 1
@176 = private unnamed_addr constant [6 x i8] c"%s { \00", align 1
@177 = private unnamed_addr constant [6 x i8] c"aa_f1\00", align 1
@178 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@179 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@180 = private unnamed_addr constant [3 x i8] c", \00", align 1
@181 = private unnamed_addr constant [6 x i8] c"aa_f2\00", align 1
@182 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@183 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@184 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@185 = private unnamed_addr constant [3 x i8] c", \00", align 1
@186 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@187 = private unnamed_addr constant [3 x i8] c", \00", align 1
@188 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@189 = private unnamed_addr constant [3 x i8] c", \00", align 1
@190 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@191 = private unnamed_addr constant [3 x i8] c", \00", align 1
@192 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@193 = private unnamed_addr constant [3 x i8] c", \00", align 1
@194 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@195 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@196 = private unnamed_addr constant [3 x i8] c" }\00", align 1
@197 = private unnamed_addr constant [3 x i8] c", \00", align 1
@198 = private unnamed_addr constant [3 x i8] c"AA\00", align 1
@199 = private unnamed_addr constant [6 x i8] c"%s { \00", align 1
@200 = private unnamed_addr constant [6 x i8] c"aa_f1\00", align 1
@201 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@202 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@203 = private unnamed_addr constant [3 x i8] c", \00", align 1
@204 = private unnamed_addr constant [6 x i8] c"aa_f2\00", align 1
@205 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@206 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@207 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@208 = private unnamed_addr constant [3 x i8] c", \00", align 1
@209 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@210 = private unnamed_addr constant [3 x i8] c", \00", align 1
@211 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@212 = private unnamed_addr constant [3 x i8] c", \00", align 1
@213 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@214 = private unnamed_addr constant [3 x i8] c", \00", align 1
@215 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@216 = private unnamed_addr constant [3 x i8] c", \00", align 1
@217 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@218 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@219 = private unnamed_addr constant [3 x i8] c" }\00", align 1
@220 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@221 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@222 = private unnamed_addr constant [3 x i8] c" }\00", align 1

declare i32 @printf(i8*, ...)

define void @main() !dbg !4 {
entry:
  %aa = alloca %AA, align 8, !dbg !58
  %0 = bitcast %AA* %aa to i8*, !dbg !58
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 12, i1 false), !dbg !58
  call void @llvm.dbg.declare(metadata %AA* %aa, metadata !9, metadata !DIExpression()), !dbg !59
  %paa = alloca %AA*, align 8, !dbg !60
  store volatile %AA* %aa, %AA** %paa, align 8, !dbg !60
  call void @llvm.dbg.declare(metadata %AA** %paa, metadata !19, metadata !DIExpression()), !dbg !61
  %deref = load %AA*, %AA** %paa, align 8, !dbg !60
  %load = load %AA, %AA* %deref, align 4, !dbg !60
  %n = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0)), !dbg !60
  %n1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0)), !dbg !60
  %1 = extractvalue %AA %load, 0, !dbg !60
  %n2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0), i32 %1), !dbg !60
  %n3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i32 0, i32 0)), !dbg !60
  %n4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i32 0, i32 0)), !dbg !60
  %2 = extractvalue %AA %load, 1, !dbg !60
  %n5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0)), !dbg !60
  %3 = extractvalue [6 x i1] %2, 0, !dbg !60
  %4 = zext i1 %3 to i32, !dbg !60
  %n6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @9, i32 0, i32 0), i32 %4), !dbg !60
  %n7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @10, i32 0, i32 0)), !dbg !60
  %5 = extractvalue [6 x i1] %2, 1, !dbg !60
  %6 = zext i1 %5 to i32, !dbg !60
  %n8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @11, i32 0, i32 0), i32 %6), !dbg !60
  %n9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @12, i32 0, i32 0)), !dbg !60
  %7 = extractvalue [6 x i1] %2, 2, !dbg !60
  %8 = zext i1 %7 to i32, !dbg !60
  %n10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @13, i32 0, i32 0), i32 %8), !dbg !60
  %n11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @14, i32 0, i32 0)), !dbg !60
  %9 = extractvalue [6 x i1] %2, 3, !dbg !60
  %10 = zext i1 %9 to i32, !dbg !60
  %n12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @15, i32 0, i32 0), i32 %10), !dbg !60
  %n13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @16, i32 0, i32 0)), !dbg !60
  %11 = extractvalue [6 x i1] %2, 4, !dbg !60
  %12 = zext i1 %11 to i32, !dbg !60
  %n14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @17, i32 0, i32 0), i32 %12), !dbg !60
  %n15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @18, i32 0, i32 0)), !dbg !60
  %13 = extractvalue [6 x i1] %2, 5, !dbg !60
  %14 = zext i1 %13 to i32, !dbg !60
  %n16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @19, i32 0, i32 0), i32 %14), !dbg !60
  %n17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @20, i32 0, i32 0)), !dbg !60
  %n18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @21, i32 0, i32 0)), !dbg !60
  %n19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @22, i32 0, i32 0), i8 10), !dbg !62
  %15 = getelementptr inbounds %AA, %AA* %aa, i32 0, i32 0, !dbg !63
  %pf2 = alloca i32*, align 8, !dbg !63
  store volatile i32* %15, i32** %pf2, align 8, !dbg !63
  call void @llvm.dbg.declare(metadata i32** %pf2, metadata !21, metadata !DIExpression()), !dbg !64
  %derefo = load i32*, i32** %pf2, align 8, !dbg !65
  store volatile i32 1000, i32* %derefo, align 4, !dbg !65
  call void @llvm.dbg.declare(metadata i32* %derefo, metadata !23, metadata !DIExpression()), !dbg !66
  %deref20 = load i32*, i32** %pf2, align 8, !dbg !65
  %load21 = load i32, i32* %deref20, align 4, !dbg !65
  %n22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @23, i32 0, i32 0), i32 %load21), !dbg !67
  %n23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @24, i32 0, i32 0), i8 10), !dbg !68
  %load24 = load %AA, %AA* %aa, align 4, !dbg !68
  %n25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @26, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @25, i32 0, i32 0)), !dbg !68
  %n26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @28, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @27, i32 0, i32 0)), !dbg !68
  %16 = extractvalue %AA %load24, 0, !dbg !68
  %n27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @29, i32 0, i32 0), i32 %16), !dbg !68
  %n28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @30, i32 0, i32 0)), !dbg !68
  %n29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @32, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @31, i32 0, i32 0)), !dbg !68
  %17 = extractvalue %AA %load24, 1, !dbg !68
  %n30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @33, i32 0, i32 0)), !dbg !68
  %18 = extractvalue [6 x i1] %17, 0, !dbg !68
  %19 = zext i1 %18 to i32, !dbg !68
  %n31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @34, i32 0, i32 0), i32 %19), !dbg !68
  %n32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @35, i32 0, i32 0)), !dbg !68
  %20 = extractvalue [6 x i1] %17, 1, !dbg !68
  %21 = zext i1 %20 to i32, !dbg !68
  %n33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @36, i32 0, i32 0), i32 %21), !dbg !68
  %n34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @37, i32 0, i32 0)), !dbg !68
  %22 = extractvalue [6 x i1] %17, 2, !dbg !68
  %23 = zext i1 %22 to i32, !dbg !68
  %n35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @38, i32 0, i32 0), i32 %23), !dbg !68
  %n36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @39, i32 0, i32 0)), !dbg !68
  %24 = extractvalue [6 x i1] %17, 3, !dbg !68
  %25 = zext i1 %24 to i32, !dbg !68
  %n37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @40, i32 0, i32 0), i32 %25), !dbg !68
  %n38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @41, i32 0, i32 0)), !dbg !68
  %26 = extractvalue [6 x i1] %17, 4, !dbg !68
  %27 = zext i1 %26 to i32, !dbg !68
  %n39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @42, i32 0, i32 0), i32 %27), !dbg !68
  %n40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @43, i32 0, i32 0)), !dbg !68
  %28 = extractvalue [6 x i1] %17, 5, !dbg !68
  %29 = zext i1 %28 to i32, !dbg !68
  %n41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @44, i32 0, i32 0), i32 %29), !dbg !68
  %n42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @45, i32 0, i32 0)), !dbg !68
  %n43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @46, i32 0, i32 0)), !dbg !68
  %n44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0), i8 10), !dbg !69
  %30 = getelementptr inbounds %AA, %AA* %aa, i32 0, i32 1, !dbg !70
  %pf3 = alloca [6 x i1]*, align 8, !dbg !70
  store volatile [6 x i1]* %30, [6 x i1]** %pf3, align 8, !dbg !70
  call void @llvm.dbg.declare(metadata [6 x i1]** %pf3, metadata !24, metadata !DIExpression()), !dbg !71
  %deref45 = load [6 x i1]*, [6 x i1]** %pf3, align 8, !dbg !70
  %load46 = load [6 x i1], [6 x i1]* %deref45, align 1, !dbg !70
  %n47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @48, i32 0, i32 0)), !dbg !70
  %31 = extractvalue [6 x i1] %load46, 0, !dbg !70
  %32 = zext i1 %31 to i32, !dbg !70
  %n48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @49, i32 0, i32 0), i32 %32), !dbg !70
  %n49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @50, i32 0, i32 0)), !dbg !70
  %33 = extractvalue [6 x i1] %load46, 1, !dbg !70
  %34 = zext i1 %33 to i32, !dbg !70
  %n50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @51, i32 0, i32 0), i32 %34), !dbg !70
  %n51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @52, i32 0, i32 0)), !dbg !70
  %35 = extractvalue [6 x i1] %load46, 2, !dbg !70
  %36 = zext i1 %35 to i32, !dbg !70
  %n52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @53, i32 0, i32 0), i32 %36), !dbg !70
  %n53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @54, i32 0, i32 0)), !dbg !70
  %37 = extractvalue [6 x i1] %load46, 3, !dbg !70
  %38 = zext i1 %37 to i32, !dbg !70
  %n54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @55, i32 0, i32 0), i32 %38), !dbg !70
  %n55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @56, i32 0, i32 0)), !dbg !70
  %39 = extractvalue [6 x i1] %load46, 4, !dbg !70
  %40 = zext i1 %39 to i32, !dbg !70
  %n56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @57, i32 0, i32 0), i32 %40), !dbg !70
  %n57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @58, i32 0, i32 0)), !dbg !70
  %41 = extractvalue [6 x i1] %load46, 5, !dbg !70
  %42 = zext i1 %41 to i32, !dbg !70
  %n58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @59, i32 0, i32 0), i32 %42), !dbg !70
  %n59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @60, i32 0, i32 0)), !dbg !70
  %n60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @61, i32 0, i32 0), i8 10), !dbg !72
  %deref61 = load [6 x i1]*, [6 x i1]** %pf3, align 8, !dbg !73
  %43 = getelementptr inbounds [6 x i1], [6 x i1]* %deref61, i32 0, i32 0, !dbg !74
  store volatile i1 true, i1* %43, align 1, !dbg !74
  call void @llvm.dbg.declare(metadata i1* %43, metadata !26, metadata !DIExpression()), !dbg !75
  %deref62 = load [6 x i1]*, [6 x i1]** %pf3, align 8, !dbg !76
  %44 = getelementptr inbounds [6 x i1], [6 x i1]* %deref62, i32 0, i32 3, !dbg !77
  store volatile i1 true, i1* %44, align 1, !dbg !77
  call void @llvm.dbg.declare(metadata i1* %44, metadata !27, metadata !DIExpression()), !dbg !78
  %deref63 = load [6 x i1]*, [6 x i1]** %pf3, align 8, !dbg !77
  %load64 = load [6 x i1], [6 x i1]* %deref63, align 1, !dbg !77
  %n65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @62, i32 0, i32 0)), !dbg !77
  %45 = extractvalue [6 x i1] %load64, 0, !dbg !77
  %46 = zext i1 %45 to i32, !dbg !77
  %n66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @63, i32 0, i32 0), i32 %46), !dbg !77
  %n67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @64, i32 0, i32 0)), !dbg !77
  %47 = extractvalue [6 x i1] %load64, 1, !dbg !77
  %48 = zext i1 %47 to i32, !dbg !77
  %n68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @65, i32 0, i32 0), i32 %48), !dbg !77
  %n69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @66, i32 0, i32 0)), !dbg !77
  %49 = extractvalue [6 x i1] %load64, 2, !dbg !77
  %50 = zext i1 %49 to i32, !dbg !77
  %n70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @67, i32 0, i32 0), i32 %50), !dbg !77
  %n71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @68, i32 0, i32 0)), !dbg !77
  %51 = extractvalue [6 x i1] %load64, 3, !dbg !77
  %52 = zext i1 %51 to i32, !dbg !77
  %n72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @69, i32 0, i32 0), i32 %52), !dbg !77
  %n73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @70, i32 0, i32 0)), !dbg !77
  %53 = extractvalue [6 x i1] %load64, 4, !dbg !77
  %54 = zext i1 %53 to i32, !dbg !77
  %n74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @71, i32 0, i32 0), i32 %54), !dbg !77
  %n75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @72, i32 0, i32 0)), !dbg !77
  %55 = extractvalue [6 x i1] %load64, 5, !dbg !77
  %56 = zext i1 %55 to i32, !dbg !77
  %n76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @73, i32 0, i32 0), i32 %56), !dbg !77
  %n77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @74, i32 0, i32 0)), !dbg !77
  %n78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @75, i32 0, i32 0), i8 10), !dbg !79
  %load79 = load %AA, %AA* %aa, align 4, !dbg !79
  %n80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @77, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @76, i32 0, i32 0)), !dbg !79
  %n81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @79, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @78, i32 0, i32 0)), !dbg !79
  %57 = extractvalue %AA %load79, 0, !dbg !79
  %n82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @80, i32 0, i32 0), i32 %57), !dbg !79
  %n83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @81, i32 0, i32 0)), !dbg !79
  %n84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @83, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @82, i32 0, i32 0)), !dbg !79
  %58 = extractvalue %AA %load79, 1, !dbg !79
  %n85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @84, i32 0, i32 0)), !dbg !79
  %59 = extractvalue [6 x i1] %58, 0, !dbg !79
  %60 = zext i1 %59 to i32, !dbg !79
  %n86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @85, i32 0, i32 0), i32 %60), !dbg !79
  %n87 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @86, i32 0, i32 0)), !dbg !79
  %61 = extractvalue [6 x i1] %58, 1, !dbg !79
  %62 = zext i1 %61 to i32, !dbg !79
  %n88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @87, i32 0, i32 0), i32 %62), !dbg !79
  %n89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @88, i32 0, i32 0)), !dbg !79
  %63 = extractvalue [6 x i1] %58, 2, !dbg !79
  %64 = zext i1 %63 to i32, !dbg !79
  %n90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @89, i32 0, i32 0), i32 %64), !dbg !79
  %n91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @90, i32 0, i32 0)), !dbg !79
  %65 = extractvalue [6 x i1] %58, 3, !dbg !79
  %66 = zext i1 %65 to i32, !dbg !79
  %n92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @91, i32 0, i32 0), i32 %66), !dbg !79
  %n93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @92, i32 0, i32 0)), !dbg !79
  %67 = extractvalue [6 x i1] %58, 4, !dbg !79
  %68 = zext i1 %67 to i32, !dbg !79
  %n94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @93, i32 0, i32 0), i32 %68), !dbg !79
  %n95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @94, i32 0, i32 0)), !dbg !79
  %69 = extractvalue [6 x i1] %58, 5, !dbg !79
  %70 = zext i1 %69 to i32, !dbg !79
  %n96 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @95, i32 0, i32 0), i32 %70), !dbg !79
  %n97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @96, i32 0, i32 0)), !dbg !79
  %n98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @97, i32 0, i32 0)), !dbg !79
  %n99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @98, i32 0, i32 0), i8 10), !dbg !80
  %71 = getelementptr inbounds %AA, %AA* %aa, i32 0, i32 0, !dbg !81
  %pf4 = alloca i32*, align 8, !dbg !81
  store volatile i32* %71, i32** %pf4, align 8, !dbg !81
  call void @llvm.dbg.declare(metadata i32** %pf4, metadata !28, metadata !DIExpression()), !dbg !82
  %derefo100 = load i32*, i32** %pf4, align 8, !dbg !83
  store volatile i32 321, i32* %derefo100, align 4, !dbg !83
  call void @llvm.dbg.declare(metadata i32* %derefo100, metadata !29, metadata !DIExpression()), !dbg !84
  %deref101 = load i32*, i32** %pf4, align 8, !dbg !83
  %load102 = load i32, i32* %deref101, align 4, !dbg !83
  %n103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @99, i32 0, i32 0), i32 %load102), !dbg !85
  %n104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @100, i32 0, i32 0), i8 10), !dbg !86
  %72 = getelementptr inbounds %AA, %AA* %aa, i32 0, i32 1, !dbg !87
  %pf5 = alloca [6 x i1]*, align 8, !dbg !87
  store volatile [6 x i1]* %72, [6 x i1]** %pf5, align 8, !dbg !87
  call void @llvm.dbg.declare(metadata [6 x i1]** %pf5, metadata !30, metadata !DIExpression()), !dbg !88
  %deref105 = load [6 x i1]*, [6 x i1]** %pf5, align 8, !dbg !89
  %73 = getelementptr inbounds [6 x i1], [6 x i1]* %deref105, i32 0, i32 1, !dbg !90
  store volatile i1 true, i1* %73, align 1, !dbg !90
  call void @llvm.dbg.declare(metadata i1* %73, metadata !31, metadata !DIExpression()), !dbg !91
  %deref106 = load [6 x i1]*, [6 x i1]** %pf5, align 8, !dbg !92
  %74 = getelementptr inbounds [6 x i1], [6 x i1]* %deref106, i32 0, i32 2, !dbg !93
  store volatile i1 true, i1* %74, align 1, !dbg !93
  call void @llvm.dbg.declare(metadata i1* %74, metadata !32, metadata !DIExpression()), !dbg !94
  %deref107 = load [6 x i1]*, [6 x i1]** %pf5, align 8, !dbg !93
  %load108 = load [6 x i1], [6 x i1]* %deref107, align 1, !dbg !93
  %n109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @101, i32 0, i32 0)), !dbg !93
  %75 = extractvalue [6 x i1] %load108, 0, !dbg !93
  %76 = zext i1 %75 to i32, !dbg !93
  %n110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @102, i32 0, i32 0), i32 %76), !dbg !93
  %n111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @103, i32 0, i32 0)), !dbg !93
  %77 = extractvalue [6 x i1] %load108, 1, !dbg !93
  %78 = zext i1 %77 to i32, !dbg !93
  %n112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @104, i32 0, i32 0), i32 %78), !dbg !93
  %n113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @105, i32 0, i32 0)), !dbg !93
  %79 = extractvalue [6 x i1] %load108, 2, !dbg !93
  %80 = zext i1 %79 to i32, !dbg !93
  %n114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @106, i32 0, i32 0), i32 %80), !dbg !93
  %n115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @107, i32 0, i32 0)), !dbg !93
  %81 = extractvalue [6 x i1] %load108, 3, !dbg !93
  %82 = zext i1 %81 to i32, !dbg !93
  %n116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @108, i32 0, i32 0), i32 %82), !dbg !93
  %n117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @109, i32 0, i32 0)), !dbg !93
  %83 = extractvalue [6 x i1] %load108, 4, !dbg !93
  %84 = zext i1 %83 to i32, !dbg !93
  %n118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @110, i32 0, i32 0), i32 %84), !dbg !93
  %n119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @111, i32 0, i32 0)), !dbg !93
  %85 = extractvalue [6 x i1] %load108, 5, !dbg !93
  %86 = zext i1 %85 to i32, !dbg !93
  %n120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @112, i32 0, i32 0), i32 %86), !dbg !93
  %n121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @113, i32 0, i32 0)), !dbg !93
  %n122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @114, i32 0, i32 0), i8 10), !dbg !95
  %a1 = alloca %A1, align 8, !dbg !96
  %87 = bitcast %A1* %a1 to i8*, !dbg !96
  call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 16, i1 false), !dbg !96
  call void @llvm.dbg.declare(metadata %A1* %a1, metadata !33, metadata !DIExpression()), !dbg !97
  %a2 = alloca %A2, align 8, !dbg !98
  %88 = bitcast %A2* %a2 to i8*, !dbg !98
  call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 48, i1 false), !dbg !98
  call void @llvm.dbg.declare(metadata %A2* %a2, metadata !39, metadata !DIExpression()), !dbg !99
  %89 = alloca [3 x i32], align 4, !dbg !100
  %90 = getelementptr [3 x i32], [3 x i32]* %89, i32 0, i64 0, !dbg !100
  store volatile i32 1, i32* %90, align 4, !dbg !100
  %91 = getelementptr [3 x i32], [3 x i32]* %89, i32 0, i64 1, !dbg !100
  store volatile i32 0, i32* %91, align 4, !dbg !100
  %92 = getelementptr [3 x i32], [3 x i32]* %89, i32 0, i64 2, !dbg !100
  store volatile i32 1, i32* %92, align 4, !dbg !100
  %ii = alloca [3 x i32], align 4, !dbg !100
  %93 = bitcast [3 x i32]* %ii to i8*, !dbg !100
  %94 = bitcast [3 x i32]* %89 to i8*, !dbg !100
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %93, i8* align 4 %94, i64 12, i1 false), !dbg !100
  call void @llvm.dbg.declare(metadata [3 x i32]* %ii, metadata !47, metadata !DIExpression()), !dbg !101
  %95 = alloca [2 x i32], align 4, !dbg !102
  %96 = getelementptr [2 x i32], [2 x i32]* %95, i32 0, i64 0, !dbg !102
  store volatile i32 0, i32* %96, align 4, !dbg !102
  %97 = getelementptr [2 x i32], [2 x i32]* %95, i32 0, i64 1, !dbg !102
  store volatile i32 1, i32* %97, align 4, !dbg !102
  %98 = alloca [2 x i32], align 4, !dbg !103
  %99 = getelementptr [2 x i32], [2 x i32]* %98, i32 0, i64 0, !dbg !103
  store volatile i32 1, i32* %99, align 4, !dbg !103
  %100 = getelementptr [2 x i32], [2 x i32]* %98, i32 0, i64 1, !dbg !103
  store volatile i32 0, i32* %100, align 4, !dbg !103
  %101 = alloca [2 x [2 x i32]], align 4, !dbg !103
  %102 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* %101, i32 0, i64 0, !dbg !103
  %103 = bitcast [2 x i32]* %102 to i8*, !dbg !103
  %104 = bitcast [2 x i32]* %95 to i8*, !dbg !103
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %103, i8* align 1 %104, i64 8, i1 false), !dbg !103
  %105 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* %101, i32 0, i64 1, !dbg !103
  %106 = bitcast [2 x i32]* %105 to i8*, !dbg !103
  %107 = bitcast [2 x i32]* %98 to i8*, !dbg !103
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 1 %107, i64 8, i1 false), !dbg !103
  %ii2 = alloca [2 x [2 x i32]], align 4, !dbg !103
  %108 = bitcast [2 x [2 x i32]]* %ii2 to i8*, !dbg !103
  %109 = bitcast [2 x [2 x i32]]* %101 to i8*, !dbg !103
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %109, i64 16, i1 false), !dbg !103
  call void @llvm.dbg.declare(metadata [2 x [2 x i32]]* %ii2, metadata !51, metadata !DIExpression()), !dbg !104
  %110 = getelementptr inbounds %A2, %A2* %a2, i32 0, i32 0, !dbg !105
  %111 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %ii2, i32 0, i32 0, !dbg !106
  %112 = getelementptr inbounds [2 x i32], [2 x i32]* %111, i32 0, i32 0, !dbg !107
  %item = load i32, i32* %112, align 4, !dbg !107
  %113 = getelementptr inbounds [2 x [2 x %AA]], [2 x [2 x %AA]]* %110, i32 0, i32 %item, !dbg !107
  %114 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %ii2, i32 0, i32 1, !dbg !108
  %115 = getelementptr inbounds [2 x i32], [2 x i32]* %114, i32 0, i32 0, !dbg !109
  %v1 = load i32, i32* %115, align 4, !dbg !109
  %add = add i32 %v1, 1, !dbg !110
  %116 = getelementptr inbounds [3 x i32], [3 x i32]* %ii, i32 0, i32 %add, !dbg !110
  %item123 = load i32, i32* %116, align 4, !dbg !110
  %117 = getelementptr inbounds [2 x %AA], [2 x %AA]* %113, i32 0, i32 %item123, !dbg !110
  %118 = getelementptr inbounds %AA, %AA* %117, i32 0, i32 0, !dbg !110
  store volatile i32 3274, i32* %118, align 4, !dbg !110
  call void @llvm.dbg.declare(metadata i32* %118, metadata !54, metadata !DIExpression()), !dbg !111
  %119 = getelementptr inbounds %A2, %A2* %a2, i32 0, i32 0, !dbg !112
  %120 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %ii2, i32 0, i32 0, !dbg !113
  %121 = getelementptr inbounds [2 x i32], [2 x i32]* %120, i32 0, i32 0, !dbg !114
  %item124 = load i32, i32* %121, align 4, !dbg !114
  %122 = getelementptr inbounds [2 x [2 x %AA]], [2 x [2 x %AA]]* %119, i32 0, i32 %item124, !dbg !114
  %123 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %ii2, i32 0, i32 1, !dbg !115
  %124 = getelementptr inbounds [2 x i32], [2 x i32]* %123, i32 0, i32 0, !dbg !116
  %v1125 = load i32, i32* %124, align 4, !dbg !116
  %add126 = add i32 %v1125, 1, !dbg !117
  %125 = getelementptr inbounds [3 x i32], [3 x i32]* %ii, i32 0, i32 %add126, !dbg !117
  %item127 = load i32, i32* %125, align 4, !dbg !117
  %126 = getelementptr inbounds [2 x %AA], [2 x %AA]* %122, i32 0, i32 %item127, !dbg !117
  %127 = getelementptr inbounds %AA, %AA* %126, i32 0, i32 0, !dbg !117
  %psa2 = alloca i32*, align 8, !dbg !117
  store volatile i32* %127, i32** %psa2, align 8, !dbg !117
  call void @llvm.dbg.declare(metadata i32** %psa2, metadata !55, metadata !DIExpression()), !dbg !118
  %deref128 = load i32*, i32** %psa2, align 8, !dbg !117
  %load129 = load i32, i32* %deref128, align 4, !dbg !117
  %n130 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @115, i32 0, i32 0), i32 %load129), !dbg !119
  %n131 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @117, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @116, i32 0, i32 0)), !dbg !120
  %128 = getelementptr inbounds %A2, %A2* %a2, i32 0, i32 0, !dbg !121
  %129 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %ii2, i32 0, i32 0, !dbg !122
  %130 = getelementptr inbounds [2 x i32], [2 x i32]* %129, i32 0, i32 0, !dbg !123
  %item132 = load i32, i32* %130, align 4, !dbg !123
  %131 = getelementptr inbounds [2 x [2 x %AA]], [2 x [2 x %AA]]* %128, i32 0, i32 %item132, !dbg !123
  %132 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %ii2, i32 0, i32 1, !dbg !124
  %133 = getelementptr inbounds [2 x i32], [2 x i32]* %132, i32 0, i32 0, !dbg !125
  %v1133 = load i32, i32* %133, align 4, !dbg !125
  %add134 = add i32 %v1133, 1, !dbg !126
  %134 = getelementptr inbounds [3 x i32], [3 x i32]* %ii, i32 0, i32 %add134, !dbg !126
  %item135 = load i32, i32* %134, align 4, !dbg !126
  %135 = getelementptr inbounds [2 x %AA], [2 x %AA]* %131, i32 0, i32 %item135, !dbg !126
  %136 = getelementptr inbounds %AA, %AA* %135, i32 0, i32 0, !dbg !126
  store volatile i32 3275, i32* %136, align 4, !dbg !126
  call void @llvm.dbg.declare(metadata i32* %136, metadata !56, metadata !DIExpression()), !dbg !127
  %137 = getelementptr inbounds %A2, %A2* %a2, i32 0, i32 0, !dbg !128
  %138 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %ii2, i32 0, i32 0, !dbg !129
  %139 = getelementptr inbounds [2 x i32], [2 x i32]* %138, i32 0, i32 0, !dbg !130
  %item136 = load i32, i32* %139, align 4, !dbg !130
  %140 = getelementptr inbounds [2 x [2 x %AA]], [2 x [2 x %AA]]* %137, i32 0, i32 %item136, !dbg !130
  %141 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %ii2, i32 0, i32 1, !dbg !131
  %142 = getelementptr inbounds [2 x i32], [2 x i32]* %141, i32 0, i32 0, !dbg !132
  %v1137 = load i32, i32* %142, align 4, !dbg !132
  %add138 = add i32 %v1137, 1, !dbg !133
  %143 = getelementptr inbounds [3 x i32], [3 x i32]* %ii, i32 0, i32 %add138, !dbg !133
  %item139 = load i32, i32* %143, align 4, !dbg !133
  %144 = getelementptr inbounds [2 x %AA], [2 x %AA]* %140, i32 0, i32 %item139, !dbg !133
  %145 = getelementptr inbounds %AA, %AA* %144, i32 0, i32 0, !dbg !133
  %psa3 = alloca i32*, align 8, !dbg !133
  store volatile i32* %145, i32** %psa3, align 8, !dbg !133
  call void @llvm.dbg.declare(metadata i32** %psa3, metadata !57, metadata !DIExpression()), !dbg !134
  %deref140 = load i32*, i32** %psa3, align 8, !dbg !133
  %load141 = load i32, i32* %deref140, align 4, !dbg !133
  %n142 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @118, i32 0, i32 0), i32 %load141), !dbg !135
  %n143 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @120, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @119, i32 0, i32 0)), !dbg !136
  %load144 = load %A2, %A2* %a2, align 4, !dbg !136
  %n145 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @122, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @121, i32 0, i32 0)), !dbg !136
  %n146 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @124, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @123, i32 0, i32 0)), !dbg !136
  %146 = extractvalue %A2 %load144, 0, !dbg !136
  %n147 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @125, i32 0, i32 0)), !dbg !136
  %147 = extractvalue [2 x [2 x %AA]] %146, 0, !dbg !136
  %n148 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @126, i32 0, i32 0)), !dbg !136
  %148 = extractvalue [2 x %AA] %147, 0, !dbg !136
  %n149 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @128, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @127, i32 0, i32 0)), !dbg !136
  %n150 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @130, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @129, i32 0, i32 0)), !dbg !136
  %149 = extractvalue %AA %148, 0, !dbg !136
  %n151 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @131, i32 0, i32 0), i32 %149), !dbg !136
  %n152 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @132, i32 0, i32 0)), !dbg !136
  %n153 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @134, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @133, i32 0, i32 0)), !dbg !136
  %150 = extractvalue %AA %148, 1, !dbg !136
  %n154 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @135, i32 0, i32 0)), !dbg !136
  %151 = extractvalue [6 x i1] %150, 0, !dbg !136
  %152 = zext i1 %151 to i32, !dbg !136
  %n155 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @136, i32 0, i32 0), i32 %152), !dbg !136
  %n156 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @137, i32 0, i32 0)), !dbg !136
  %153 = extractvalue [6 x i1] %150, 1, !dbg !136
  %154 = zext i1 %153 to i32, !dbg !136
  %n157 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @138, i32 0, i32 0), i32 %154), !dbg !136
  %n158 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @139, i32 0, i32 0)), !dbg !136
  %155 = extractvalue [6 x i1] %150, 2, !dbg !136
  %156 = zext i1 %155 to i32, !dbg !136
  %n159 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @140, i32 0, i32 0), i32 %156), !dbg !136
  %n160 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @141, i32 0, i32 0)), !dbg !136
  %157 = extractvalue [6 x i1] %150, 3, !dbg !136
  %158 = zext i1 %157 to i32, !dbg !136
  %n161 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @142, i32 0, i32 0), i32 %158), !dbg !136
  %n162 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @143, i32 0, i32 0)), !dbg !136
  %159 = extractvalue [6 x i1] %150, 4, !dbg !136
  %160 = zext i1 %159 to i32, !dbg !136
  %n163 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @144, i32 0, i32 0), i32 %160), !dbg !136
  %n164 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @145, i32 0, i32 0)), !dbg !136
  %161 = extractvalue [6 x i1] %150, 5, !dbg !136
  %162 = zext i1 %161 to i32, !dbg !136
  %n165 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @146, i32 0, i32 0), i32 %162), !dbg !136
  %n166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @147, i32 0, i32 0)), !dbg !136
  %n167 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @148, i32 0, i32 0)), !dbg !136
  %n168 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @149, i32 0, i32 0)), !dbg !136
  %163 = extractvalue [2 x %AA] %147, 1, !dbg !136
  %n169 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @151, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @150, i32 0, i32 0)), !dbg !136
  %n170 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @153, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @152, i32 0, i32 0)), !dbg !136
  %164 = extractvalue %AA %163, 0, !dbg !136
  %n171 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @154, i32 0, i32 0), i32 %164), !dbg !136
  %n172 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @155, i32 0, i32 0)), !dbg !136
  %n173 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @157, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @156, i32 0, i32 0)), !dbg !136
  %165 = extractvalue %AA %163, 1, !dbg !136
  %n174 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @158, i32 0, i32 0)), !dbg !136
  %166 = extractvalue [6 x i1] %165, 0, !dbg !136
  %167 = zext i1 %166 to i32, !dbg !136
  %n175 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @159, i32 0, i32 0), i32 %167), !dbg !136
  %n176 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @160, i32 0, i32 0)), !dbg !136
  %168 = extractvalue [6 x i1] %165, 1, !dbg !136
  %169 = zext i1 %168 to i32, !dbg !136
  %n177 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @161, i32 0, i32 0), i32 %169), !dbg !136
  %n178 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @162, i32 0, i32 0)), !dbg !136
  %170 = extractvalue [6 x i1] %165, 2, !dbg !136
  %171 = zext i1 %170 to i32, !dbg !136
  %n179 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @163, i32 0, i32 0), i32 %171), !dbg !136
  %n180 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @164, i32 0, i32 0)), !dbg !136
  %172 = extractvalue [6 x i1] %165, 3, !dbg !136
  %173 = zext i1 %172 to i32, !dbg !136
  %n181 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @165, i32 0, i32 0), i32 %173), !dbg !136
  %n182 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @166, i32 0, i32 0)), !dbg !136
  %174 = extractvalue [6 x i1] %165, 4, !dbg !136
  %175 = zext i1 %174 to i32, !dbg !136
  %n183 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @167, i32 0, i32 0), i32 %175), !dbg !136
  %n184 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @168, i32 0, i32 0)), !dbg !136
  %176 = extractvalue [6 x i1] %165, 5, !dbg !136
  %177 = zext i1 %176 to i32, !dbg !136
  %n185 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @169, i32 0, i32 0), i32 %177), !dbg !136
  %n186 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @170, i32 0, i32 0)), !dbg !136
  %n187 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @171, i32 0, i32 0)), !dbg !136
  %n188 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @172, i32 0, i32 0)), !dbg !136
  %n189 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @173, i32 0, i32 0)), !dbg !136
  %178 = extractvalue [2 x [2 x %AA]] %146, 1, !dbg !136
  %n190 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @174, i32 0, i32 0)), !dbg !136
  %179 = extractvalue [2 x %AA] %178, 0, !dbg !136
  %n191 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @176, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @175, i32 0, i32 0)), !dbg !136
  %n192 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @178, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @177, i32 0, i32 0)), !dbg !136
  %180 = extractvalue %AA %179, 0, !dbg !136
  %n193 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @179, i32 0, i32 0), i32 %180), !dbg !136
  %n194 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @180, i32 0, i32 0)), !dbg !136
  %n195 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @182, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @181, i32 0, i32 0)), !dbg !136
  %181 = extractvalue %AA %179, 1, !dbg !136
  %n196 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @183, i32 0, i32 0)), !dbg !136
  %182 = extractvalue [6 x i1] %181, 0, !dbg !136
  %183 = zext i1 %182 to i32, !dbg !136
  %n197 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @184, i32 0, i32 0), i32 %183), !dbg !136
  %n198 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @185, i32 0, i32 0)), !dbg !136
  %184 = extractvalue [6 x i1] %181, 1, !dbg !136
  %185 = zext i1 %184 to i32, !dbg !136
  %n199 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @186, i32 0, i32 0), i32 %185), !dbg !136
  %n200 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @187, i32 0, i32 0)), !dbg !136
  %186 = extractvalue [6 x i1] %181, 2, !dbg !136
  %187 = zext i1 %186 to i32, !dbg !136
  %n201 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @188, i32 0, i32 0), i32 %187), !dbg !136
  %n202 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @189, i32 0, i32 0)), !dbg !136
  %188 = extractvalue [6 x i1] %181, 3, !dbg !136
  %189 = zext i1 %188 to i32, !dbg !136
  %n203 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @190, i32 0, i32 0), i32 %189), !dbg !136
  %n204 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @191, i32 0, i32 0)), !dbg !136
  %190 = extractvalue [6 x i1] %181, 4, !dbg !136
  %191 = zext i1 %190 to i32, !dbg !136
  %n205 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @192, i32 0, i32 0), i32 %191), !dbg !136
  %n206 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @193, i32 0, i32 0)), !dbg !136
  %192 = extractvalue [6 x i1] %181, 5, !dbg !136
  %193 = zext i1 %192 to i32, !dbg !136
  %n207 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @194, i32 0, i32 0), i32 %193), !dbg !136
  %n208 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @195, i32 0, i32 0)), !dbg !136
  %n209 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @196, i32 0, i32 0)), !dbg !136
  %n210 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @197, i32 0, i32 0)), !dbg !136
  %194 = extractvalue [2 x %AA] %178, 1, !dbg !136
  %n211 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @199, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @198, i32 0, i32 0)), !dbg !136
  %n212 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @201, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @200, i32 0, i32 0)), !dbg !136
  %195 = extractvalue %AA %194, 0, !dbg !136
  %n213 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @202, i32 0, i32 0), i32 %195), !dbg !136
  %n214 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @203, i32 0, i32 0)), !dbg !136
  %n215 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @205, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @204, i32 0, i32 0)), !dbg !136
  %196 = extractvalue %AA %194, 1, !dbg !136
  %n216 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @206, i32 0, i32 0)), !dbg !136
  %197 = extractvalue [6 x i1] %196, 0, !dbg !136
  %198 = zext i1 %197 to i32, !dbg !136
  %n217 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @207, i32 0, i32 0), i32 %198), !dbg !136
  %n218 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @208, i32 0, i32 0)), !dbg !136
  %199 = extractvalue [6 x i1] %196, 1, !dbg !136
  %200 = zext i1 %199 to i32, !dbg !136
  %n219 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @209, i32 0, i32 0), i32 %200), !dbg !136
  %n220 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @210, i32 0, i32 0)), !dbg !136
  %201 = extractvalue [6 x i1] %196, 2, !dbg !136
  %202 = zext i1 %201 to i32, !dbg !136
  %n221 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @211, i32 0, i32 0), i32 %202), !dbg !136
  %n222 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @212, i32 0, i32 0)), !dbg !136
  %203 = extractvalue [6 x i1] %196, 3, !dbg !136
  %204 = zext i1 %203 to i32, !dbg !136
  %n223 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @213, i32 0, i32 0), i32 %204), !dbg !136
  %n224 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @214, i32 0, i32 0)), !dbg !136
  %205 = extractvalue [6 x i1] %196, 4, !dbg !136
  %206 = zext i1 %205 to i32, !dbg !136
  %n225 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @215, i32 0, i32 0), i32 %206), !dbg !136
  %n226 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @216, i32 0, i32 0)), !dbg !136
  %207 = extractvalue [6 x i1] %196, 5, !dbg !136
  %208 = zext i1 %207 to i32, !dbg !136
  %n227 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @217, i32 0, i32 0), i32 %208), !dbg !136
  %n228 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @218, i32 0, i32 0)), !dbg !136
  %n229 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @219, i32 0, i32 0)), !dbg !136
  %n230 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @220, i32 0, i32 0)), !dbg !136
  %n231 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @221, i32 0, i32 0)), !dbg !136
  %n232 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @222, i32 0, i32 0)), !dbg !136
  br label %ret, !dbg !137

ret:                                              ; preds = %entry
  ret void, !dbg !137
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

attributes #0 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C99, file: !2, producer: "ca compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "struct_array2.ca", directory: ".")
!3 = !{}
!4 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 15, type: !5, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{!9, !19, !21, !23, !24, !26, !27, !28, !29, !30, !31, !32, !33, !39, !47, !51, !54, !55, !56, !57}
!9 = !DILocalVariable(name: "aa", scope: !4, file: !2, line: 16, type: !10)
!10 = !DICompositeType(tag: DW_TAG_structure_type, name: "AA", scope: !4, file: !2, line: 5, size: 96, elements: !11)
!11 = !{!12, !14}
!12 = !DIDerivedType(tag: DW_TAG_member, name: "aa_f1", scope: !10, file: !2, line: 5, baseType: !13, size: 32)
!13 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!14 = !DIDerivedType(tag: DW_TAG_member, name: "aa_f2", scope: !10, file: !2, line: 5, baseType: !15, size: 48, offset: 32)
!15 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 48, elements: !17)
!16 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!17 = !{!18}
!18 = !DISubrange(count: 6, lowerBound: 0)
!19 = !DILocalVariable(name: "paa", scope: !4, file: !2, line: 17, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*{AA;aa_f1:i32,aa_f2:[bool;6]}", baseType: !10, size: 8)
!21 = !DILocalVariable(name: "pf2", scope: !4, file: !2, line: 19, type: !22)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*i32", baseType: !13, size: 8)
!23 = !DILocalVariable(name: "t:void", scope: !4, file: !2, line: 20, type: !13)
!24 = !DILocalVariable(name: "pf3", scope: !4, file: !2, line: 24, type: !25)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*[bool;6]", baseType: !15, size: 8)
!26 = !DILocalVariable(name: "t:void", scope: !4, file: !2, line: 26, type: !16)
!27 = !DILocalVariable(name: "t:void", scope: !4, file: !2, line: 27, type: !16)
!28 = !DILocalVariable(name: "pf4", scope: !4, file: !2, line: 31, type: !22)
!29 = !DILocalVariable(name: "t:void", scope: !4, file: !2, line: 32, type: !13)
!30 = !DILocalVariable(name: "pf5", scope: !4, file: !2, line: 34, type: !25)
!31 = !DILocalVariable(name: "t:void", scope: !4, file: !2, line: 35, type: !16)
!32 = !DILocalVariable(name: "t:void", scope: !4, file: !2, line: 36, type: !16)
!33 = !DILocalVariable(name: "a1", scope: !4, file: !2, line: 39, type: !34)
!34 = !DICompositeType(tag: DW_TAG_structure_type, name: "A1", scope: !4, file: !2, line: 5, size: 128, elements: !35)
!35 = !{!36, !38}
!36 = !DIDerivedType(tag: DW_TAG_member, name: "a1_f1", scope: !34, file: !2, line: 5, baseType: !37, size: 32)
!37 = !DIBasicType(name: "f32", size: 32, encoding: DW_ATE_float)
!38 = !DIDerivedType(tag: DW_TAG_member, name: "a1_f2", scope: !34, file: !2, line: 5, baseType: !10, size: 96, offset: 32)
!39 = !DILocalVariable(name: "a2", scope: !4, file: !2, line: 40, type: !40)
!40 = !DICompositeType(tag: DW_TAG_structure_type, name: "A2", scope: !4, file: !2, line: 5, size: 384, elements: !41)
!41 = !{!42}
!42 = !DIDerivedType(tag: DW_TAG_member, name: "arr", scope: !40, file: !2, line: 5, baseType: !43, size: 384)
!43 = !DICompositeType(tag: DW_TAG_array_type, baseType: !44, size: 384, elements: !45)
!44 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 192, elements: !45)
!45 = !{!46}
!46 = !DISubrange(count: 2, lowerBound: 0)
!47 = !DILocalVariable(name: "ii", scope: !4, file: !2, line: 41, type: !48)
!48 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 96, elements: !49)
!49 = !{!50}
!50 = !DISubrange(count: 3, lowerBound: 0)
!51 = !DILocalVariable(name: "ii2", scope: !4, file: !2, line: 42, type: !52)
!52 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 128, elements: !45)
!53 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 64, elements: !45)
!54 = !DILocalVariable(name: "t:void", scope: !4, file: !2, line: 43, type: !13)
!55 = !DILocalVariable(name: "psa2", scope: !4, file: !2, line: 44, type: !22)
!56 = !DILocalVariable(name: "t:void", scope: !4, file: !2, line: 46, type: !13)
!57 = !DILocalVariable(name: "psa3", scope: !4, file: !2, line: 47, type: !22)
!58 = !DILocation(line: 16, column: 30, scope: !4)
!59 = !DILocation(line: 16, scope: !4)
!60 = !DILocation(line: 17, column: 18, scope: !4)
!61 = !DILocation(line: 17, scope: !4)
!62 = !DILocation(line: 18, column: 27, scope: !4)
!63 = !DILocation(line: 19, column: 24, scope: !4)
!64 = !DILocation(line: 19, scope: !4)
!65 = !DILocation(line: 20, column: 16, scope: !4)
!66 = !DILocation(line: 20, scope: !4)
!67 = !DILocation(line: 21, column: 15, scope: !4)
!68 = !DILocation(line: 21, column: 27, scope: !4)
!69 = !DILocation(line: 22, column: 25, scope: !4)
!70 = !DILocation(line: 24, column: 24, scope: !4)
!71 = !DILocation(line: 24, scope: !4)
!72 = !DILocation(line: 25, column: 27, scope: !4)
!73 = !DILocation(line: 26, column: 21, scope: !4)
!74 = !DILocation(line: 26, column: 13, scope: !4)
!75 = !DILocation(line: 26, scope: !4)
!76 = !DILocation(line: 27, column: 21, scope: !4)
!77 = !DILocation(line: 27, column: 13, scope: !4)
!78 = !DILocation(line: 27, scope: !4)
!79 = !DILocation(line: 28, column: 27, scope: !4)
!80 = !DILocation(line: 29, column: 25, scope: !4)
!81 = !DILocation(line: 31, column: 23, scope: !4)
!82 = !DILocation(line: 31, scope: !4)
!83 = !DILocation(line: 32, column: 15, scope: !4)
!84 = !DILocation(line: 32, scope: !4)
!85 = !DILocation(line: 33, column: 15, scope: !4)
!86 = !DILocation(line: 33, column: 27, scope: !4)
!87 = !DILocation(line: 34, column: 23, scope: !4)
!88 = !DILocation(line: 34, scope: !4)
!89 = !DILocation(line: 35, column: 21, scope: !4)
!90 = !DILocation(line: 35, column: 13, scope: !4)
!91 = !DILocation(line: 35, scope: !4)
!92 = !DILocation(line: 36, column: 21, scope: !4)
!93 = !DILocation(line: 36, column: 13, scope: !4)
!94 = !DILocation(line: 36, scope: !4)
!95 = !DILocation(line: 37, column: 27, scope: !4)
!96 = !DILocation(line: 39, column: 30, scope: !4)
!97 = !DILocation(line: 39, scope: !4)
!98 = !DILocation(line: 40, column: 30, scope: !4)
!99 = !DILocation(line: 40, scope: !4)
!100 = !DILocation(line: 41, column: 22, scope: !4)
!101 = !DILocation(line: 41, scope: !4)
!102 = !DILocation(line: 42, column: 21, scope: !4)
!103 = !DILocation(line: 42, column: 29, scope: !4)
!104 = !DILocation(line: 42, scope: !4)
!105 = !DILocation(line: 43, column: 55, scope: !4)
!106 = !DILocation(line: 43, column: 17, scope: !4)
!107 = !DILocation(line: 43, column: 20, scope: !4)
!108 = !DILocation(line: 43, column: 31, scope: !4)
!109 = !DILocation(line: 43, column: 34, scope: !4)
!110 = !DILocation(line: 43, column: 39, scope: !4)
!111 = !DILocation(line: 43, scope: !4)
!112 = !DILocation(line: 44, column: 59, scope: !4)
!113 = !DILocation(line: 44, column: 30, scope: !4)
!114 = !DILocation(line: 44, column: 33, scope: !4)
!115 = !DILocation(line: 44, column: 44, scope: !4)
!116 = !DILocation(line: 44, column: 47, scope: !4)
!117 = !DILocation(line: 44, column: 52, scope: !4)
!118 = !DILocation(line: 44, scope: !4)
!119 = !DILocation(line: 45, column: 16, scope: !4)
!120 = !DILocation(line: 45, column: 26, scope: !4)
!121 = !DILocation(line: 46, column: 55, scope: !4)
!122 = !DILocation(line: 46, column: 17, scope: !4)
!123 = !DILocation(line: 46, column: 20, scope: !4)
!124 = !DILocation(line: 46, column: 31, scope: !4)
!125 = !DILocation(line: 46, column: 34, scope: !4)
!126 = !DILocation(line: 46, column: 39, scope: !4)
!127 = !DILocation(line: 46, scope: !4)
!128 = !DILocation(line: 47, column: 58, scope: !4)
!129 = !DILocation(line: 47, column: 29, scope: !4)
!130 = !DILocation(line: 47, column: 32, scope: !4)
!131 = !DILocation(line: 47, column: 43, scope: !4)
!132 = !DILocation(line: 47, column: 46, scope: !4)
!133 = !DILocation(line: 47, column: 51, scope: !4)
!134 = !DILocation(line: 47, scope: !4)
!135 = !DILocation(line: 48, column: 16, scope: !4)
!136 = !DILocation(line: 48, column: 27, scope: !4)
!137 = !DILocation(line: 50, column: 1, scope: !4)
