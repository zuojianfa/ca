trait TT {
    fn output(self);
    fn increase(self, count: i32) -> i32;
}

struct AA {
    v: i32,
}

impl AA {
    fn new(v: i32) -> AA {
	return AA{v};
    }

    fn output(self) {
	print "AA::output\n";
    }

    fn increase(self, count: i32) -> i32 {
	print "AA::increase\n";
	self->v += count;
	return self->v;
    }
}

impl TT for AA {
    fn output(self) {
	print "TT::output\n";
    }

    fn increase(self, count: i32) -> i32 {
	print "TT::increase\n";
	self->v += count;
	return self->v;
    }
}

fn main() {
    let a = AA::new(3);
    TT::output(&a);
    AA::output(&a);
    <AA as TT>::output(&a);

    let v = TT::increase(&a, 333);
    print v; print '\n';

    let v = AA::increase(&a, 222);
    print v; print '\n';

    let v = <AA as TT>::increase(&a, 222);
    print v;
}

