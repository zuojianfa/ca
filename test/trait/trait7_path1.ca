trait TT {
    fn output(self);
    fn increase(self, count: i32) -> i32;
}

struct AA {
    v: i32,
}

impl AA {
    fn new(a: i32) -> AA {
	return AA{a};
    }
}

impl TT for AA {
    fn output(self) {
	print "TT::output\n";
    }

    fn increase(self, count: i32) -> i32 {
	self->v += count;
	return self->v;
    }
}

fn main() {
    let a = AA::new(0);
    a.output();
    AA::output(&a);

    let v = a.increase(33);
    print v; print '\n';
    let v2 = AA::increase(&a, 22);
    print v2; print '\n';
}

