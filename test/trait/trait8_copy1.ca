trait TT {
    fn default_static_method() {
	print "TT::default_static_method\n";
    }

    fn output(self) {
	print "TT::output: ";
	print *self;
	print '\n';
    }

    fn add(self, a: i32, b: i32) -> i32 {
	return a + b;
    }
}

struct AA {
    v: i32,
}

impl AA {
    fn new(v: i32) -> AA {
	return AA {v};
    }

    fn add(self, a: i32, b: i32) -> i32 {
	return a + b + v;
    }

    fn output(self) {
	print "TT::output: ";
	print *self;
	print '\n';
    }
}

impl TT for AA {
}

fn main() {
    let a = AA::new(1024);
    a.output();
    AA::no_self_fn1();
    AA::no_self_fn2(301);
    //<AA as TT>::no_self_fn1();

    let v = a.add(1,2);
    print v; print '\n';

    let v2 = a.mul(4);
    print v2;
}

