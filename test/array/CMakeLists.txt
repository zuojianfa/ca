set(test_case_seq 1)
do_testf(array "array.ca.result" "array.ca.result.tmp" ca array.ca array.ca.result.tmp)
do_testf(array "array_2sideinfer.ca.result" "array_2sideinfer.ca.result.tmp" ca array_2sideinfer.ca array_2sideinfer.ca.result.tmp)
do_test(array "line: 2, col: 26:.*`f32` type required, but found `f64`" ca array_error1.ca)
do_test(array "line: 2, col: 26:.*`f64` type required, but found `f32`" ca array_error2.ca)
do_testf(array "array_dbgprint1.ca.result" "array_dbgprint1.ca.result.tmp" ca array_dbgprint1.ca array_dbgprint1.ca.result.tmp)
do_testf(array "array2string.ca.result" "array2string.ca.result.tmp" ca array2string.ca array2string.ca.result.tmp)
do_test(array "determined array size `10` not match the expression type `11`" ca array2stringbad1.ca)
do_test(array "determined array size `12` not match the expression type `11`" ca array2stringbad2.ca)
do_testf(array "array2pointer.ca.result" "array2pointer.ca.result.tmp" ca array2pointer.ca array2pointer.ca.result.tmp)
do_test(array "[\[]1, 2, 3\[\]]\n\[\[]4, 5, 6[\]]\n0x.*\n0x.*" ca array_assign.ca)
do_test(array "[\[]1, 2, 3\[\]]\n\[\[]4, 5, 6[\]]\n[\[][\[]1, 2, 3[\]], [\[]4, 5, 6[\]][\]]" ca array_var.ca)
do_test(array "[\[]1, 3, 5[\]]\n[\[][\[]1, 2, 3[\]], [\[]4, 5, 7[\]][\]]\n[\[][\[]1, 1, 2[\]], [\[]3, 4, 10[\]][\]]" ca array_var_assign.ca)
do_test(array "\\[1, 2, 3\\]\n\\[4, 5, 6\\]\n\\[\\[1, 2, 3\\], \\[4, 5, 6\\]\\]\n\\[\\[\\[1, 2, 3\\], \\[4, 5, 6\\]\\], \\[\\[1, 2, 3\\], \\[4, 5, 6\\]\\], \\[\\[1, 2, 3\\], \\[4, 5, 6\\]\\]\\]\n\\[\\[\\[\\[\\[1, 2, 3\\], \\[4, 5, 6\\]\\], \\[\\[1, 2, 3\\], \\[4, 5, 6\\]\\], \\[\\[1, 2, 3\\], \\[4, 5, 6\\]\\]\\]\\], \\[\\[\\[\\[1, 2, 3\\], \\[4, 5, 6\\]\\], \\[\\[1, 2, 3\\], \\[4, 5, 6\\]\\], \\[\\[1, 2, 3\\], \\[4, 5, 6\\]\\]\\]\\]\\]" ca array_var2.ca)
do_test(array "\\[i32; 5\\]\n\\[1, 2, 3, 4, 5\\]\nsize = 20, type: t:\\[i32;5\\]\n1 2 3 4 5 \n\\[\\[\\[1, 2\\], \\[3, 4\\]\\], \\[\\[5, 6\\], \\[7, 8\\]\\]\\]\n1 2 3 4 5 6 7 8 \n6\n" ca array_item1.ca)
do_test(array "4 5 3 4 5 5 5 5 5 4 4 \n7" ca array_item2.ca)
do_test(array "1 2 3 2 5\n" ca array_item3.ca)
do_test(array "\\[\\[\\[\\[1, 2, 3, 4, 5, 6, 7, 8\\]\\]\\], \\[\\[\\[2, 3, 4, 5, 6, 7, 8, 9\\]\\]\\]\\]\n5 8 5 8\n\\[1, 2, 3, 4, 5, 6, 7, 8\\]\n\\[2, 3, 4, 5, 6, 7, 8, 9\\]\n\\[\\[\\[1, 2\\], \\[3, 4\\]\\], \\[\\[5, 6\\], \\[7, 8\\]\\]\\]\n\\[\\[1, 2\\], \\[3, 4\\]\\]\n\\[\\[5, 6\\], \\[7, 8\\]\\]\n\\[3, 4\\]\n\\[1, 2\\]\n\\[5, 6\\]\n\\[7, 8\\]\n3 2 5 8 4 1 6 7\n3 2 5 8 4 1 6 7\n" ca array_item4.ca)
do_test(array "\\[1, 2, 3\\]\n\\[2, 3, 4\\]\n\\[4, 6, 8\\]\n\\[1.100000, 2.200000, 3.300000\\]\n\\[2.200000, 3.300000, 4.400000\\]\n\\[6.600000, 9.900000, 13.200000\\]" ca array_item_assign1.ca)
do_test(array "\\[\\[\\[1, 2\\], \\[3, 4\\]\\], \\[\\[5, 6\\], \\[7, 8\\]\\]\\]\n\\[\\[\\[2, 3\\], \\[4, 5\\]\\], \\[\\[3, 4\\], \\[5, 6\\]\\]\\]\n\\[\\[\\[5, 6\\], \\[7, 8\\]\\], \\[\\[7, 8\\], \\[9, 10\\]\\]\\]\n\\[1, 2\\]\n\\[3, 4\\]\n\\[5, 6\\]\n\\[7, 8\\]\n\\[\\[\\[0, 0\\], \\[1, 0\\]\\], \\[\\[1, 0\\], \\[2, 1\\]\\]\\]\n1 2 3 4 5 6 7 8 \n\\[\\[\\[1, 3\\], \\[4, 6\\]\\], \\[\\[6, 8\\], \\[9, 11\\]\\]\\]\n" ca array_item_assign2.ca)
do_test(array "\\[AA { f1: 0, f2: 0 }, AA { f1: 0, f2: 0 }, AA { f1: 0, f2: 0 }\\]\n\\[AA { f1: 99, f2: 1 }, AA { f1: 88, f2: 1 }, AA { f1: 77, f2: 0 }\\]\n7782\n\\[AA { f1: 99, f2: 1 }, AA { f1: 88, f2: 1 }, AA { f1: 82, f2: 0 }\\]\n\\[A1 { af1: \\[AA { f1: 0, f2: 0 }, AA { f1: 0, f2: 0 }\\] }, A1 { af1: \\[AA { f1: 0, f2: 0 }, AA { f1: 0, f2: 0 }\\] }\\]\n\\[A1 { af1: \\[AA { f1: 666, f2: 0 }, AA { f1: 555, f2: 1 }\\] }, A1 { af1: \\[AA { f1: 732, f2: 1 }, AA { f1: 897, f2: 1 }\\] }\\]\n897 1 732 1 555 1 666 0" ca array_struct1.ca)
do_testf(array "array_struct1.ca.ll" "array_struct1.ca.ll.tmp" ca -g -ll array_struct1.ca array_struct1.ca.ll.tmp)
do_test(array "good" ca array_empty.ca)

