# when not exist main function
set(test_case_seq 1)
do_test(nomain " " ca -main 0.ca)
do_test(nomain " " ca -main 1.ca)
do_test(nomain .* ca -c extern_call2_assist.ca ../extern_call2_assist.o)
do_test(nomain "T ca_add" nm ../extern_call2_assist.o)
do_test(nomain " " ca -main extern_call2.ca)
do_test(nomain "3" ca -main extern_fn1.ca)
do_test(nomain "Hello ca!" ca -main extern_putchar.ca)
do_test(nomain "123" ca -main fn1.ca)
do_test(nomain "1234" ca -main fn2.ca)
do_test(nomain "12345678910-9-8-7-6-5-4-3-2-1012345678910" ca -main fn3.ca)
do_test(nomain "3" ca -main fn_add.ca)
do_test(nomain "111234086232111234086232111234086232" ca -main fn_fib2.ca)
do_test(nomain " " ca -main fn_multiple.ca)
do_test(nomain " " ca -main fn_param_simple.ca)
do_test(nomain "12345678910111213" ca -main fn_recursive1.ca)
do_test(nomain "return value: 3" ca -main fn_ret.ca)
do_test(nomain "return value: 101" ca -main fn_simple.ca)
do_test(nomain "2" ca -main goto_simplest.ca)
do_test(nomain "2" ca -main if_assign.ca)
do_test(nomain "1" ca -main if.ca)
do_test(nomain "101" ca -main if_empty.ca)
do_test(nomain "2" ca -main input.ca)
do_test(nomain "72257225" ca -main polynomial.ca)
do_test(nomain "23617" ca -main print.ca)
do_test(nomain " " ca -main semicolon.ca)
do_test(nomain "2\nreturn value: 3" ca -main type1.ca)
do_test(nomain "4333.*\t432.432430.* 1.*0.*Hello CA!" ca -main type_print.ca)
do_test(nomain "012345" ca -main while.ca)
do_test(nomain "error" ca -main symtax.ca)

